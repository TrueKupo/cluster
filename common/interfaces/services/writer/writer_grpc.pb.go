// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc2
// source: writer/writer.proto

package writer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WriterServiceClient is the client API for WriterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriterServiceClient interface {
	GetBalanceOf(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	SendFromTo(ctx context.Context, in *SendFromToRequest, opts ...grpc.CallOption) (*SendFromToResponse, error)
	GetTxStatusByHash(ctx context.Context, in *GetTxStatusByHashRequest, opts ...grpc.CallOption) (*GetTxStatusByHashResponse, error)
}

type writerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWriterServiceClient(cc grpc.ClientConnInterface) WriterServiceClient {
	return &writerServiceClient{cc}
}

func (c *writerServiceClient) GetBalanceOf(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/writer.WriterService/GetBalanceOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerServiceClient) SendFromTo(ctx context.Context, in *SendFromToRequest, opts ...grpc.CallOption) (*SendFromToResponse, error) {
	out := new(SendFromToResponse)
	err := c.cc.Invoke(ctx, "/writer.WriterService/SendFromTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerServiceClient) GetTxStatusByHash(ctx context.Context, in *GetTxStatusByHashRequest, opts ...grpc.CallOption) (*GetTxStatusByHashResponse, error) {
	out := new(GetTxStatusByHashResponse)
	err := c.cc.Invoke(ctx, "/writer.WriterService/GetTxStatusByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriterServiceServer is the server API for WriterService service.
// All implementations must embed UnimplementedWriterServiceServer
// for forward compatibility
type WriterServiceServer interface {
	GetBalanceOf(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	SendFromTo(context.Context, *SendFromToRequest) (*SendFromToResponse, error)
	GetTxStatusByHash(context.Context, *GetTxStatusByHashRequest) (*GetTxStatusByHashResponse, error)
	mustEmbedUnimplementedWriterServiceServer()
}

// UnimplementedWriterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWriterServiceServer struct {
}

func (UnimplementedWriterServiceServer) GetBalanceOf(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceOf not implemented")
}
func (UnimplementedWriterServiceServer) SendFromTo(context.Context, *SendFromToRequest) (*SendFromToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFromTo not implemented")
}
func (UnimplementedWriterServiceServer) GetTxStatusByHash(context.Context, *GetTxStatusByHashRequest) (*GetTxStatusByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxStatusByHash not implemented")
}
func (UnimplementedWriterServiceServer) mustEmbedUnimplementedWriterServiceServer() {}

// UnsafeWriterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriterServiceServer will
// result in compilation errors.
type UnsafeWriterServiceServer interface {
	mustEmbedUnimplementedWriterServiceServer()
}

func RegisterWriterServiceServer(s grpc.ServiceRegistrar, srv WriterServiceServer) {
	s.RegisterService(&WriterService_ServiceDesc, srv)
}

func _WriterService_GetBalanceOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServiceServer).GetBalanceOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.WriterService/GetBalanceOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServiceServer).GetBalanceOf(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriterService_SendFromTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFromToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServiceServer).SendFromTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.WriterService/SendFromTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServiceServer).SendFromTo(ctx, req.(*SendFromToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriterService_GetTxStatusByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxStatusByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServiceServer).GetTxStatusByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writer.WriterService/GetTxStatusByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServiceServer).GetTxStatusByHash(ctx, req.(*GetTxStatusByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WriterService_ServiceDesc is the grpc.ServiceDesc for WriterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WriterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "writer.WriterService",
	HandlerType: (*WriterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalanceOf",
			Handler:    _WriterService_GetBalanceOf_Handler,
		},
		{
			MethodName: "SendFromTo",
			Handler:    _WriterService_SendFromTo_Handler,
		},
		{
			MethodName: "GetTxStatusByHash",
			Handler:    _WriterService_GetTxStatusByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "writer/writer.proto",
}
