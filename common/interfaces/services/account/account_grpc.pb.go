// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc2
// source: account/account.proto

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	NewMnemonic(ctx context.Context, in *NewMnemonicRequest, opts ...grpc.CallOption) (*NewMnemonicResponse, error)
	GetSeedFromMnemonic(ctx context.Context, in *GetSeedFromMnemonicRequest, opts ...grpc.CallOption) (*SeedFromMnemonicResponse, error)
	GetMasterKeyFromMnemonic(ctx context.Context, in *GetMasterKeyFromMnemonicRequest, opts ...grpc.CallOption) (*MasterKeyFromMnemonicResponse, error)
	SeedDeriveToPublicKeyHex(ctx context.Context, in *SeedDeriveToAddressHexRequest, opts ...grpc.CallOption) (*SeedDeriveToAddressHexResponse, error)
	SeedDeriveToPrivateKeyHex(ctx context.Context, in *SeedDeriveToAddressHexRequest, opts ...grpc.CallOption) (*SeedDeriveToAddressHexResponse, error)
	SeedDeriveToAccountData(ctx context.Context, in *SeedDeriveToAccountRequest, opts ...grpc.CallOption) (*SeedDeriveToAccountResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) NewMnemonic(ctx context.Context, in *NewMnemonicRequest, opts ...grpc.CallOption) (*NewMnemonicResponse, error) {
	out := new(NewMnemonicResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/NewMnemonic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetSeedFromMnemonic(ctx context.Context, in *GetSeedFromMnemonicRequest, opts ...grpc.CallOption) (*SeedFromMnemonicResponse, error) {
	out := new(SeedFromMnemonicResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/GetSeedFromMnemonic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetMasterKeyFromMnemonic(ctx context.Context, in *GetMasterKeyFromMnemonicRequest, opts ...grpc.CallOption) (*MasterKeyFromMnemonicResponse, error) {
	out := new(MasterKeyFromMnemonicResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/GetMasterKeyFromMnemonic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SeedDeriveToPublicKeyHex(ctx context.Context, in *SeedDeriveToAddressHexRequest, opts ...grpc.CallOption) (*SeedDeriveToAddressHexResponse, error) {
	out := new(SeedDeriveToAddressHexResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/SeedDeriveToPublicKeyHex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SeedDeriveToPrivateKeyHex(ctx context.Context, in *SeedDeriveToAddressHexRequest, opts ...grpc.CallOption) (*SeedDeriveToAddressHexResponse, error) {
	out := new(SeedDeriveToAddressHexResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/SeedDeriveToPrivateKeyHex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SeedDeriveToAccountData(ctx context.Context, in *SeedDeriveToAccountRequest, opts ...grpc.CallOption) (*SeedDeriveToAccountResponse, error) {
	out := new(SeedDeriveToAccountResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/SeedDeriveToAccountData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	NewMnemonic(context.Context, *NewMnemonicRequest) (*NewMnemonicResponse, error)
	GetSeedFromMnemonic(context.Context, *GetSeedFromMnemonicRequest) (*SeedFromMnemonicResponse, error)
	GetMasterKeyFromMnemonic(context.Context, *GetMasterKeyFromMnemonicRequest) (*MasterKeyFromMnemonicResponse, error)
	SeedDeriveToPublicKeyHex(context.Context, *SeedDeriveToAddressHexRequest) (*SeedDeriveToAddressHexResponse, error)
	SeedDeriveToPrivateKeyHex(context.Context, *SeedDeriveToAddressHexRequest) (*SeedDeriveToAddressHexResponse, error)
	SeedDeriveToAccountData(context.Context, *SeedDeriveToAccountRequest) (*SeedDeriveToAccountResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) NewMnemonic(context.Context, *NewMnemonicRequest) (*NewMnemonicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMnemonic not implemented")
}
func (UnimplementedAccountServiceServer) GetSeedFromMnemonic(context.Context, *GetSeedFromMnemonicRequest) (*SeedFromMnemonicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeedFromMnemonic not implemented")
}
func (UnimplementedAccountServiceServer) GetMasterKeyFromMnemonic(context.Context, *GetMasterKeyFromMnemonicRequest) (*MasterKeyFromMnemonicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterKeyFromMnemonic not implemented")
}
func (UnimplementedAccountServiceServer) SeedDeriveToPublicKeyHex(context.Context, *SeedDeriveToAddressHexRequest) (*SeedDeriveToAddressHexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedDeriveToPublicKeyHex not implemented")
}
func (UnimplementedAccountServiceServer) SeedDeriveToPrivateKeyHex(context.Context, *SeedDeriveToAddressHexRequest) (*SeedDeriveToAddressHexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedDeriveToPrivateKeyHex not implemented")
}
func (UnimplementedAccountServiceServer) SeedDeriveToAccountData(context.Context, *SeedDeriveToAccountRequest) (*SeedDeriveToAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedDeriveToAccountData not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_NewMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMnemonicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).NewMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/NewMnemonic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).NewMnemonic(ctx, req.(*NewMnemonicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetSeedFromMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeedFromMnemonicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetSeedFromMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetSeedFromMnemonic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetSeedFromMnemonic(ctx, req.(*GetSeedFromMnemonicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetMasterKeyFromMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterKeyFromMnemonicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetMasterKeyFromMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/GetMasterKeyFromMnemonic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetMasterKeyFromMnemonic(ctx, req.(*GetMasterKeyFromMnemonicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SeedDeriveToPublicKeyHex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedDeriveToAddressHexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SeedDeriveToPublicKeyHex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/SeedDeriveToPublicKeyHex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SeedDeriveToPublicKeyHex(ctx, req.(*SeedDeriveToAddressHexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SeedDeriveToPrivateKeyHex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedDeriveToAddressHexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SeedDeriveToPrivateKeyHex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/SeedDeriveToPrivateKeyHex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SeedDeriveToPrivateKeyHex(ctx, req.(*SeedDeriveToAddressHexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SeedDeriveToAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedDeriveToAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SeedDeriveToAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/SeedDeriveToAccountData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SeedDeriveToAccountData(ctx, req.(*SeedDeriveToAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMnemonic",
			Handler:    _AccountService_NewMnemonic_Handler,
		},
		{
			MethodName: "GetSeedFromMnemonic",
			Handler:    _AccountService_GetSeedFromMnemonic_Handler,
		},
		{
			MethodName: "GetMasterKeyFromMnemonic",
			Handler:    _AccountService_GetMasterKeyFromMnemonic_Handler,
		},
		{
			MethodName: "SeedDeriveToPublicKeyHex",
			Handler:    _AccountService_SeedDeriveToPublicKeyHex_Handler,
		},
		{
			MethodName: "SeedDeriveToPrivateKeyHex",
			Handler:    _AccountService_SeedDeriveToPrivateKeyHex_Handler,
		},
		{
			MethodName: "SeedDeriveToAccountData",
			Handler:    _AccountService_SeedDeriveToAccountData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/account.proto",
}
