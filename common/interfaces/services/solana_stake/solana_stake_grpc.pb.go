// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc2
// source: solana_stake/solana_stake.proto

package solana_stake

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolanaStakeServiceClient is the client API for SolanaStakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolanaStakeServiceClient interface {
	ValidatorInfo(ctx context.Context, in *ValidatorInfoRequest, opts ...grpc.CallOption) (*ValidatorInfoResponse, error)
	ValidatorsList(ctx context.Context, in *ValidatorsListRequest, opts ...grpc.CallOption) (*ValidatorsListResponse, error)
	CreateStakeAccount(ctx context.Context, in *CreateStakeAccountRequest, opts ...grpc.CallOption) (*CreateStakeAccountResponse, error)
	DelegateStake(ctx context.Context, in *DelegateStakeRequest, opts ...grpc.CallOption) (*DelegateStakeResponse, error)
	DeactivateStake(ctx context.Context, in *DeactivateStakeRequest, opts ...grpc.CallOption) (*DeactivateStakeResponse, error)
	WithdrawStake(ctx context.Context, in *WithdrawStakeRequest, opts ...grpc.CallOption) (*WithdrawStakeResponse, error)
	StakeActivationStatus(ctx context.Context, in *StakeActivationStatusRequest, opts ...grpc.CallOption) (*StakeActivationStatusResponse, error)
	StakeAccountInfo(ctx context.Context, in *StakeAccountInfoRequest, opts ...grpc.CallOption) (*StakeAccountInfoResponse, error)
}

type solanaStakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSolanaStakeServiceClient(cc grpc.ClientConnInterface) SolanaStakeServiceClient {
	return &solanaStakeServiceClient{cc}
}

func (c *solanaStakeServiceClient) ValidatorInfo(ctx context.Context, in *ValidatorInfoRequest, opts ...grpc.CallOption) (*ValidatorInfoResponse, error) {
	out := new(ValidatorInfoResponse)
	err := c.cc.Invoke(ctx, "/solana_stake.SolanaStakeService/ValidatorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaStakeServiceClient) ValidatorsList(ctx context.Context, in *ValidatorsListRequest, opts ...grpc.CallOption) (*ValidatorsListResponse, error) {
	out := new(ValidatorsListResponse)
	err := c.cc.Invoke(ctx, "/solana_stake.SolanaStakeService/ValidatorsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaStakeServiceClient) CreateStakeAccount(ctx context.Context, in *CreateStakeAccountRequest, opts ...grpc.CallOption) (*CreateStakeAccountResponse, error) {
	out := new(CreateStakeAccountResponse)
	err := c.cc.Invoke(ctx, "/solana_stake.SolanaStakeService/CreateStakeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaStakeServiceClient) DelegateStake(ctx context.Context, in *DelegateStakeRequest, opts ...grpc.CallOption) (*DelegateStakeResponse, error) {
	out := new(DelegateStakeResponse)
	err := c.cc.Invoke(ctx, "/solana_stake.SolanaStakeService/DelegateStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaStakeServiceClient) DeactivateStake(ctx context.Context, in *DeactivateStakeRequest, opts ...grpc.CallOption) (*DeactivateStakeResponse, error) {
	out := new(DeactivateStakeResponse)
	err := c.cc.Invoke(ctx, "/solana_stake.SolanaStakeService/DeactivateStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaStakeServiceClient) WithdrawStake(ctx context.Context, in *WithdrawStakeRequest, opts ...grpc.CallOption) (*WithdrawStakeResponse, error) {
	out := new(WithdrawStakeResponse)
	err := c.cc.Invoke(ctx, "/solana_stake.SolanaStakeService/WithdrawStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaStakeServiceClient) StakeActivationStatus(ctx context.Context, in *StakeActivationStatusRequest, opts ...grpc.CallOption) (*StakeActivationStatusResponse, error) {
	out := new(StakeActivationStatusResponse)
	err := c.cc.Invoke(ctx, "/solana_stake.SolanaStakeService/StakeActivationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solanaStakeServiceClient) StakeAccountInfo(ctx context.Context, in *StakeAccountInfoRequest, opts ...grpc.CallOption) (*StakeAccountInfoResponse, error) {
	out := new(StakeAccountInfoResponse)
	err := c.cc.Invoke(ctx, "/solana_stake.SolanaStakeService/StakeAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolanaStakeServiceServer is the server API for SolanaStakeService service.
// All implementations must embed UnimplementedSolanaStakeServiceServer
// for forward compatibility
type SolanaStakeServiceServer interface {
	ValidatorInfo(context.Context, *ValidatorInfoRequest) (*ValidatorInfoResponse, error)
	ValidatorsList(context.Context, *ValidatorsListRequest) (*ValidatorsListResponse, error)
	CreateStakeAccount(context.Context, *CreateStakeAccountRequest) (*CreateStakeAccountResponse, error)
	DelegateStake(context.Context, *DelegateStakeRequest) (*DelegateStakeResponse, error)
	DeactivateStake(context.Context, *DeactivateStakeRequest) (*DeactivateStakeResponse, error)
	WithdrawStake(context.Context, *WithdrawStakeRequest) (*WithdrawStakeResponse, error)
	StakeActivationStatus(context.Context, *StakeActivationStatusRequest) (*StakeActivationStatusResponse, error)
	StakeAccountInfo(context.Context, *StakeAccountInfoRequest) (*StakeAccountInfoResponse, error)
	mustEmbedUnimplementedSolanaStakeServiceServer()
}

// UnimplementedSolanaStakeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSolanaStakeServiceServer struct {
}

func (UnimplementedSolanaStakeServiceServer) ValidatorInfo(context.Context, *ValidatorInfoRequest) (*ValidatorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorInfo not implemented")
}
func (UnimplementedSolanaStakeServiceServer) ValidatorsList(context.Context, *ValidatorsListRequest) (*ValidatorsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorsList not implemented")
}
func (UnimplementedSolanaStakeServiceServer) CreateStakeAccount(context.Context, *CreateStakeAccountRequest) (*CreateStakeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStakeAccount not implemented")
}
func (UnimplementedSolanaStakeServiceServer) DelegateStake(context.Context, *DelegateStakeRequest) (*DelegateStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateStake not implemented")
}
func (UnimplementedSolanaStakeServiceServer) DeactivateStake(context.Context, *DeactivateStakeRequest) (*DeactivateStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateStake not implemented")
}
func (UnimplementedSolanaStakeServiceServer) WithdrawStake(context.Context, *WithdrawStakeRequest) (*WithdrawStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawStake not implemented")
}
func (UnimplementedSolanaStakeServiceServer) StakeActivationStatus(context.Context, *StakeActivationStatusRequest) (*StakeActivationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeActivationStatus not implemented")
}
func (UnimplementedSolanaStakeServiceServer) StakeAccountInfo(context.Context, *StakeAccountInfoRequest) (*StakeAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeAccountInfo not implemented")
}
func (UnimplementedSolanaStakeServiceServer) mustEmbedUnimplementedSolanaStakeServiceServer() {}

// UnsafeSolanaStakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolanaStakeServiceServer will
// result in compilation errors.
type UnsafeSolanaStakeServiceServer interface {
	mustEmbedUnimplementedSolanaStakeServiceServer()
}

func RegisterSolanaStakeServiceServer(s grpc.ServiceRegistrar, srv SolanaStakeServiceServer) {
	s.RegisterService(&SolanaStakeService_ServiceDesc, srv)
}

func _SolanaStakeService_ValidatorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaStakeServiceServer).ValidatorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solana_stake.SolanaStakeService/ValidatorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaStakeServiceServer).ValidatorInfo(ctx, req.(*ValidatorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaStakeService_ValidatorsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatorsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaStakeServiceServer).ValidatorsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solana_stake.SolanaStakeService/ValidatorsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaStakeServiceServer).ValidatorsList(ctx, req.(*ValidatorsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaStakeService_CreateStakeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStakeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaStakeServiceServer).CreateStakeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solana_stake.SolanaStakeService/CreateStakeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaStakeServiceServer).CreateStakeAccount(ctx, req.(*CreateStakeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaStakeService_DelegateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaStakeServiceServer).DelegateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solana_stake.SolanaStakeService/DelegateStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaStakeServiceServer).DelegateStake(ctx, req.(*DelegateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaStakeService_DeactivateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaStakeServiceServer).DeactivateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solana_stake.SolanaStakeService/DeactivateStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaStakeServiceServer).DeactivateStake(ctx, req.(*DeactivateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaStakeService_WithdrawStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaStakeServiceServer).WithdrawStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solana_stake.SolanaStakeService/WithdrawStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaStakeServiceServer).WithdrawStake(ctx, req.(*WithdrawStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaStakeService_StakeActivationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeActivationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaStakeServiceServer).StakeActivationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solana_stake.SolanaStakeService/StakeActivationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaStakeServiceServer).StakeActivationStatus(ctx, req.(*StakeActivationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolanaStakeService_StakeAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolanaStakeServiceServer).StakeAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/solana_stake.SolanaStakeService/StakeAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolanaStakeServiceServer).StakeAccountInfo(ctx, req.(*StakeAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SolanaStakeService_ServiceDesc is the grpc.ServiceDesc for SolanaStakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolanaStakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "solana_stake.SolanaStakeService",
	HandlerType: (*SolanaStakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidatorInfo",
			Handler:    _SolanaStakeService_ValidatorInfo_Handler,
		},
		{
			MethodName: "ValidatorsList",
			Handler:    _SolanaStakeService_ValidatorsList_Handler,
		},
		{
			MethodName: "CreateStakeAccount",
			Handler:    _SolanaStakeService_CreateStakeAccount_Handler,
		},
		{
			MethodName: "DelegateStake",
			Handler:    _SolanaStakeService_DelegateStake_Handler,
		},
		{
			MethodName: "DeactivateStake",
			Handler:    _SolanaStakeService_DeactivateStake_Handler,
		},
		{
			MethodName: "WithdrawStake",
			Handler:    _SolanaStakeService_WithdrawStake_Handler,
		},
		{
			MethodName: "StakeActivationStatus",
			Handler:    _SolanaStakeService_StakeActivationStatus_Handler,
		},
		{
			MethodName: "StakeAccountInfo",
			Handler:    _SolanaStakeService_StakeAccountInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "solana_stake/solana_stake.proto",
}
