// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: solana_stake/solana_stake.proto

package solana_stake

import (
	response "github.com/truekupo/cluster/common/interfaces/messages/response"
	types "github.com/truekupo/cluster/common/interfaces/messages/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidatorSortField int32

const (
	ValidatorSortField_ACTIVE_STAKE ValidatorSortField = 0
	ValidatorSortField_CREATED_AT   ValidatorSortField = 1
	ValidatorSortField_TOTAL_SCORE  ValidatorSortField = 2
)

// Enum value maps for ValidatorSortField.
var (
	ValidatorSortField_name = map[int32]string{
		0: "ACTIVE_STAKE",
		1: "CREATED_AT",
		2: "TOTAL_SCORE",
	}
	ValidatorSortField_value = map[string]int32{
		"ACTIVE_STAKE": 0,
		"CREATED_AT":   1,
		"TOTAL_SCORE":  2,
	}
)

func (x ValidatorSortField) Enum() *ValidatorSortField {
	p := new(ValidatorSortField)
	*p = x
	return p
}

func (x ValidatorSortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidatorSortField) Descriptor() protoreflect.EnumDescriptor {
	return file_solana_stake_solana_stake_proto_enumTypes[0].Descriptor()
}

func (ValidatorSortField) Type() protoreflect.EnumType {
	return &file_solana_stake_solana_stake_proto_enumTypes[0]
}

func (x ValidatorSortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidatorSortField.Descriptor instead.
func (ValidatorSortField) EnumDescriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{0}
}

type ActivationStatus int32

const (
	ActivationStatus_ACTIVE       ActivationStatus = 0
	ActivationStatus_INACTIVE     ActivationStatus = 1
	ActivationStatus_ACTIVATING   ActivationStatus = 2
	ActivationStatus_DEACTIVATING ActivationStatus = 3
)

// Enum value maps for ActivationStatus.
var (
	ActivationStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
		2: "ACTIVATING",
		3: "DEACTIVATING",
	}
	ActivationStatus_value = map[string]int32{
		"ACTIVE":       0,
		"INACTIVE":     1,
		"ACTIVATING":   2,
		"DEACTIVATING": 3,
	}
)

func (x ActivationStatus) Enum() *ActivationStatus {
	p := new(ActivationStatus)
	*p = x
	return p
}

func (x ActivationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_solana_stake_solana_stake_proto_enumTypes[1].Descriptor()
}

func (ActivationStatus) Type() protoreflect.EnumType {
	return &file_solana_stake_solana_stake_proto_enumTypes[1]
}

func (x ActivationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivationStatus.Descriptor instead.
func (ActivationStatus) EnumDescriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{1}
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           int64                  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Network                      string                 `protobuf:"bytes,2,opt,name=Network,proto3" json:"Network,omitempty"`
	Account                      string                 `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Name                         string                 `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	WwwUrl                       string                 `protobuf:"bytes,5,opt,name=WwwUrl,proto3" json:"WwwUrl,omitempty"`
	Details                      string                 `protobuf:"bytes,6,opt,name=Details,proto3" json:"Details,omitempty"`
	AvatarUrl                    string                 `protobuf:"bytes,7,opt,name=AvatarUrl,proto3" json:"AvatarUrl,omitempty"`
	CreatedAt                    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt                    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	TotalScore                   int64                  `protobuf:"varint,10,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`
	RootDistanceScore            int64                  `protobuf:"varint,11,opt,name=RootDistanceScore,proto3" json:"RootDistanceScore,omitempty"`
	VoteDistanceScore            int64                  `protobuf:"varint,12,opt,name=VoteDistanceScore,proto3" json:"VoteDistanceScore,omitempty"`
	SkippedSlotScore             int64                  `protobuf:"varint,13,opt,name=SkippedSlotScore,proto3" json:"SkippedSlotScore,omitempty"`
	SoftwareVersion              string                 `protobuf:"bytes,14,opt,name=SoftwareVersion,proto3" json:"SoftwareVersion,omitempty"`
	SoftwareVersionScore         int64                  `protobuf:"varint,15,opt,name=SoftwareVersionScore,proto3" json:"SoftwareVersionScore,omitempty"`
	StakeConcentrationScore      int64                  `protobuf:"varint,16,opt,name=StakeConcentrationScore,proto3" json:"StakeConcentrationScore,omitempty"`
	DataCenterConcentrationScore int64                  `protobuf:"varint,17,opt,name=DataCenterConcentrationScore,proto3" json:"DataCenterConcentrationScore,omitempty"`
	PublishedInformationScore    int64                  `protobuf:"varint,18,opt,name=PublishedInformationScore,proto3" json:"PublishedInformationScore,omitempty"`
	SecurityReportScore          int64                  `protobuf:"varint,19,opt,name=SecurityReportScore,proto3" json:"SecurityReportScore,omitempty"`
	ActiveStake                  int64                  `protobuf:"varint,20,opt,name=ActiveStake,proto3" json:"ActiveStake,omitempty"`
	Commission                   int64                  `protobuf:"varint,21,opt,name=Commission,proto3" json:"Commission,omitempty"`
	Delinquent                   bool                   `protobuf:"varint,22,opt,name=Delinquent,proto3" json:"Delinquent,omitempty"`
	DataCenterKey                string                 `protobuf:"bytes,23,opt,name=DataCenterKey,proto3" json:"DataCenterKey,omitempty"`
	DataCenterHost               string                 `protobuf:"bytes,24,opt,name=DataCenterHost,proto3" json:"DataCenterHost,omitempty"`
	AutonomousSystemNumber       int64                  `protobuf:"varint,25,opt,name=AutonomousSystemNumber,proto3" json:"AutonomousSystemNumber,omitempty"`
	VoteAccount                  string                 `protobuf:"bytes,26,opt,name=VoteAccount,proto3" json:"VoteAccount,omitempty"`
	EpochCredits                 int64                  `protobuf:"varint,27,opt,name=EpochCredits,proto3" json:"EpochCredits,omitempty"`
	SkippedSlots                 int64                  `protobuf:"varint,28,opt,name=SkippedSlots,proto3" json:"SkippedSlots,omitempty"`
	SkippedSlotPercent           string                 `protobuf:"bytes,29,opt,name=SkippedSlotPercent,proto3" json:"SkippedSlotPercent,omitempty"`
	PingTime                     string                 `protobuf:"bytes,30,opt,name=PingTime,proto3" json:"PingTime,omitempty"`
	Url                          string                 `protobuf:"bytes,31,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{0}
}

func (x *Validator) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Validator) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Validator) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Validator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Validator) GetWwwUrl() string {
	if x != nil {
		return x.WwwUrl
	}
	return ""
}

func (x *Validator) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Validator) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Validator) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Validator) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Validator) GetTotalScore() int64 {
	if x != nil {
		return x.TotalScore
	}
	return 0
}

func (x *Validator) GetRootDistanceScore() int64 {
	if x != nil {
		return x.RootDistanceScore
	}
	return 0
}

func (x *Validator) GetVoteDistanceScore() int64 {
	if x != nil {
		return x.VoteDistanceScore
	}
	return 0
}

func (x *Validator) GetSkippedSlotScore() int64 {
	if x != nil {
		return x.SkippedSlotScore
	}
	return 0
}

func (x *Validator) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *Validator) GetSoftwareVersionScore() int64 {
	if x != nil {
		return x.SoftwareVersionScore
	}
	return 0
}

func (x *Validator) GetStakeConcentrationScore() int64 {
	if x != nil {
		return x.StakeConcentrationScore
	}
	return 0
}

func (x *Validator) GetDataCenterConcentrationScore() int64 {
	if x != nil {
		return x.DataCenterConcentrationScore
	}
	return 0
}

func (x *Validator) GetPublishedInformationScore() int64 {
	if x != nil {
		return x.PublishedInformationScore
	}
	return 0
}

func (x *Validator) GetSecurityReportScore() int64 {
	if x != nil {
		return x.SecurityReportScore
	}
	return 0
}

func (x *Validator) GetActiveStake() int64 {
	if x != nil {
		return x.ActiveStake
	}
	return 0
}

func (x *Validator) GetCommission() int64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *Validator) GetDelinquent() bool {
	if x != nil {
		return x.Delinquent
	}
	return false
}

func (x *Validator) GetDataCenterKey() string {
	if x != nil {
		return x.DataCenterKey
	}
	return ""
}

func (x *Validator) GetDataCenterHost() string {
	if x != nil {
		return x.DataCenterHost
	}
	return ""
}

func (x *Validator) GetAutonomousSystemNumber() int64 {
	if x != nil {
		return x.AutonomousSystemNumber
	}
	return 0
}

func (x *Validator) GetVoteAccount() string {
	if x != nil {
		return x.VoteAccount
	}
	return ""
}

func (x *Validator) GetEpochCredits() int64 {
	if x != nil {
		return x.EpochCredits
	}
	return 0
}

func (x *Validator) GetSkippedSlots() int64 {
	if x != nil {
		return x.SkippedSlots
	}
	return 0
}

func (x *Validator) GetSkippedSlotPercent() string {
	if x != nil {
		return x.SkippedSlotPercent
	}
	return ""
}

func (x *Validator) GetPingTime() string {
	if x != nil {
		return x.PingTime
	}
	return ""
}

func (x *Validator) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type StakeAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ActivationStatus   `protobuf:"varint,1,opt,name=Status,proto3,enum=solana_stake.ActivationStatus" json:"Status,omitempty"`
	Info   *StakeAccount_Info `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *StakeAccount) Reset() {
	*x = StakeAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccount) ProtoMessage() {}

func (x *StakeAccount) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccount.ProtoReflect.Descriptor instead.
func (*StakeAccount) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{1}
}

func (x *StakeAccount) GetStatus() ActivationStatus {
	if x != nil {
		return x.Status
	}
	return ActivationStatus_ACTIVE
}

func (x *StakeAccount) GetInfo() *StakeAccount_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type ValidatorInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *ValidatorInfoRequest) Reset() {
	*x = ValidatorInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorInfoRequest) ProtoMessage() {}

func (x *ValidatorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorInfoRequest.ProtoReflect.Descriptor instead.
func (*ValidatorInfoRequest) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{2}
}

func (x *ValidatorInfoRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ValidatorInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info      *Validator       `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
	RetStatus *response.Status `protobuf:"bytes,2,opt,name=ret_status,json=retStatus,proto3" json:"ret_status,omitempty"`
}

func (x *ValidatorInfoResponse) Reset() {
	*x = ValidatorInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorInfoResponse) ProtoMessage() {}

func (x *ValidatorInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorInfoResponse.ProtoReflect.Descriptor instead.
func (*ValidatorInfoResponse) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{3}
}

func (x *ValidatorInfoResponse) GetInfo() *Validator {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ValidatorInfoResponse) GetRetStatus() *response.Status {
	if x != nil {
		return x.RetStatus
	}
	return nil
}

type ValidatorsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From      int32              `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	Limit     int32              `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	SortField ValidatorSortField `protobuf:"varint,3,opt,name=SortField,proto3,enum=solana_stake.ValidatorSortField" json:"SortField,omitempty"`
	Order     types.Order        `protobuf:"varint,4,opt,name=Order,proto3,enum=types.Order" json:"Order,omitempty"`
}

func (x *ValidatorsListRequest) Reset() {
	*x = ValidatorsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorsListRequest) ProtoMessage() {}

func (x *ValidatorsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorsListRequest.ProtoReflect.Descriptor instead.
func (*ValidatorsListRequest) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{4}
}

func (x *ValidatorsListRequest) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *ValidatorsListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ValidatorsListRequest) GetSortField() ValidatorSortField {
	if x != nil {
		return x.SortField
	}
	return ValidatorSortField_ACTIVE_STAKE
}

func (x *ValidatorsListRequest) GetOrder() types.Order {
	if x != nil {
		return x.Order
	}
	return types.Order_ASC
}

type ValidatorsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*Validator     `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	RetStatus *response.Status `protobuf:"bytes,2,opt,name=ret_status,json=retStatus,proto3" json:"ret_status,omitempty"`
}

func (x *ValidatorsListResponse) Reset() {
	*x = ValidatorsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorsListResponse) ProtoMessage() {}

func (x *ValidatorsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorsListResponse.ProtoReflect.Descriptor instead.
func (*ValidatorsListResponse) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{5}
}

func (x *ValidatorsListResponse) GetList() []*Validator {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ValidatorsListResponse) GetRetStatus() *response.Status {
	if x != nil {
		return x.RetStatus
	}
	return nil
}

type CreateStakeAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerPrivateBase58 string `protobuf:"bytes,1,opt,name=SignerPrivateBase58,proto3" json:"SignerPrivateBase58,omitempty"`
	Amount              string `protobuf:"bytes,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *CreateStakeAccountRequest) Reset() {
	*x = CreateStakeAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStakeAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStakeAccountRequest) ProtoMessage() {}

func (x *CreateStakeAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStakeAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateStakeAccountRequest) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{6}
}

func (x *CreateStakeAccountRequest) GetSignerPrivateBase58() string {
	if x != nil {
		return x.SignerPrivateBase58
	}
	return ""
}

func (x *CreateStakeAccountRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CreateStakeAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash             string           `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	StakeAddressBase58 string           `protobuf:"bytes,2,opt,name=StakeAddressBase58,proto3" json:"StakeAddressBase58,omitempty"`
	RetStatus          *response.Status `protobuf:"bytes,3,opt,name=ret_status,json=retStatus,proto3" json:"ret_status,omitempty"`
}

func (x *CreateStakeAccountResponse) Reset() {
	*x = CreateStakeAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStakeAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStakeAccountResponse) ProtoMessage() {}

func (x *CreateStakeAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStakeAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateStakeAccountResponse) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{7}
}

func (x *CreateStakeAccountResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *CreateStakeAccountResponse) GetStakeAddressBase58() string {
	if x != nil {
		return x.StakeAddressBase58
	}
	return ""
}

func (x *CreateStakeAccountResponse) GetRetStatus() *response.Status {
	if x != nil {
		return x.RetStatus
	}
	return nil
}

type DelegateStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerPrivateBase58 string `protobuf:"bytes,1,opt,name=SignerPrivateBase58,proto3" json:"SignerPrivateBase58,omitempty"`
	StakeAddressBase58  string `protobuf:"bytes,2,opt,name=StakeAddressBase58,proto3" json:"StakeAddressBase58,omitempty"`
	VoteAddressBase58   string `protobuf:"bytes,3,opt,name=VoteAddressBase58,proto3" json:"VoteAddressBase58,omitempty"`
}

func (x *DelegateStakeRequest) Reset() {
	*x = DelegateStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateStakeRequest) ProtoMessage() {}

func (x *DelegateStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateStakeRequest.ProtoReflect.Descriptor instead.
func (*DelegateStakeRequest) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{8}
}

func (x *DelegateStakeRequest) GetSignerPrivateBase58() string {
	if x != nil {
		return x.SignerPrivateBase58
	}
	return ""
}

func (x *DelegateStakeRequest) GetStakeAddressBase58() string {
	if x != nil {
		return x.StakeAddressBase58
	}
	return ""
}

func (x *DelegateStakeRequest) GetVoteAddressBase58() string {
	if x != nil {
		return x.VoteAddressBase58
	}
	return ""
}

type DelegateStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash    string           `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	RetStatus *response.Status `protobuf:"bytes,2,opt,name=ret_status,json=retStatus,proto3" json:"ret_status,omitempty"`
}

func (x *DelegateStakeResponse) Reset() {
	*x = DelegateStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateStakeResponse) ProtoMessage() {}

func (x *DelegateStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateStakeResponse.ProtoReflect.Descriptor instead.
func (*DelegateStakeResponse) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{9}
}

func (x *DelegateStakeResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *DelegateStakeResponse) GetRetStatus() *response.Status {
	if x != nil {
		return x.RetStatus
	}
	return nil
}

type DeactivateStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerPrivateBase58 string `protobuf:"bytes,1,opt,name=SignerPrivateBase58,proto3" json:"SignerPrivateBase58,omitempty"`
	StakeAddressBase58  string `protobuf:"bytes,2,opt,name=StakeAddressBase58,proto3" json:"StakeAddressBase58,omitempty"`
}

func (x *DeactivateStakeRequest) Reset() {
	*x = DeactivateStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateStakeRequest) ProtoMessage() {}

func (x *DeactivateStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateStakeRequest.ProtoReflect.Descriptor instead.
func (*DeactivateStakeRequest) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{10}
}

func (x *DeactivateStakeRequest) GetSignerPrivateBase58() string {
	if x != nil {
		return x.SignerPrivateBase58
	}
	return ""
}

func (x *DeactivateStakeRequest) GetStakeAddressBase58() string {
	if x != nil {
		return x.StakeAddressBase58
	}
	return ""
}

type DeactivateStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash    string           `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	RetStatus *response.Status `protobuf:"bytes,2,opt,name=ret_status,json=retStatus,proto3" json:"ret_status,omitempty"`
}

func (x *DeactivateStakeResponse) Reset() {
	*x = DeactivateStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateStakeResponse) ProtoMessage() {}

func (x *DeactivateStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateStakeResponse.ProtoReflect.Descriptor instead.
func (*DeactivateStakeResponse) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{11}
}

func (x *DeactivateStakeResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *DeactivateStakeResponse) GetRetStatus() *response.Status {
	if x != nil {
		return x.RetStatus
	}
	return nil
}

type WithdrawStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerPrivateBase58 string `protobuf:"bytes,1,opt,name=SignerPrivateBase58,proto3" json:"SignerPrivateBase58,omitempty"`
	StakeAddressBase58  string `protobuf:"bytes,2,opt,name=StakeAddressBase58,proto3" json:"StakeAddressBase58,omitempty"`
	Amount              string `protobuf:"bytes,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *WithdrawStakeRequest) Reset() {
	*x = WithdrawStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawStakeRequest) ProtoMessage() {}

func (x *WithdrawStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawStakeRequest.ProtoReflect.Descriptor instead.
func (*WithdrawStakeRequest) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{12}
}

func (x *WithdrawStakeRequest) GetSignerPrivateBase58() string {
	if x != nil {
		return x.SignerPrivateBase58
	}
	return ""
}

func (x *WithdrawStakeRequest) GetStakeAddressBase58() string {
	if x != nil {
		return x.StakeAddressBase58
	}
	return ""
}

func (x *WithdrawStakeRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type WithdrawStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash    string           `protobuf:"bytes,1,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	RetStatus *response.Status `protobuf:"bytes,2,opt,name=ret_status,json=retStatus,proto3" json:"ret_status,omitempty"`
}

func (x *WithdrawStakeResponse) Reset() {
	*x = WithdrawStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawStakeResponse) ProtoMessage() {}

func (x *WithdrawStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawStakeResponse.ProtoReflect.Descriptor instead.
func (*WithdrawStakeResponse) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{13}
}

func (x *WithdrawStakeResponse) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *WithdrawStakeResponse) GetRetStatus() *response.Status {
	if x != nil {
		return x.RetStatus
	}
	return nil
}

type StakeActivationStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAddressBase58 string `protobuf:"bytes,1,opt,name=StakeAddressBase58,proto3" json:"StakeAddressBase58,omitempty"`
}

func (x *StakeActivationStatusRequest) Reset() {
	*x = StakeActivationStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeActivationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeActivationStatusRequest) ProtoMessage() {}

func (x *StakeActivationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeActivationStatusRequest.ProtoReflect.Descriptor instead.
func (*StakeActivationStatusRequest) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{14}
}

func (x *StakeActivationStatusRequest) GetStakeAddressBase58() string {
	if x != nil {
		return x.StakeAddressBase58
	}
	return ""
}

type StakeActivationStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        ActivationStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=solana_stake.ActivationStatus" json:"Status,omitempty"`
	ActiveEpoch   uint64           `protobuf:"varint,2,opt,name=ActiveEpoch,proto3" json:"ActiveEpoch,omitempty"`
	InactiveEpoch uint64           `protobuf:"varint,3,opt,name=InactiveEpoch,proto3" json:"InactiveEpoch,omitempty"`
	RetStatus     *response.Status `protobuf:"bytes,4,opt,name=ret_status,json=retStatus,proto3" json:"ret_status,omitempty"`
}

func (x *StakeActivationStatusResponse) Reset() {
	*x = StakeActivationStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeActivationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeActivationStatusResponse) ProtoMessage() {}

func (x *StakeActivationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeActivationStatusResponse.ProtoReflect.Descriptor instead.
func (*StakeActivationStatusResponse) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{15}
}

func (x *StakeActivationStatusResponse) GetStatus() ActivationStatus {
	if x != nil {
		return x.Status
	}
	return ActivationStatus_ACTIVE
}

func (x *StakeActivationStatusResponse) GetActiveEpoch() uint64 {
	if x != nil {
		return x.ActiveEpoch
	}
	return 0
}

func (x *StakeActivationStatusResponse) GetInactiveEpoch() uint64 {
	if x != nil {
		return x.InactiveEpoch
	}
	return 0
}

func (x *StakeActivationStatusResponse) GetRetStatus() *response.Status {
	if x != nil {
		return x.RetStatus
	}
	return nil
}

type StakeAccountInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAddressBase58 string `protobuf:"bytes,1,opt,name=StakeAddressBase58,proto3" json:"StakeAddressBase58,omitempty"`
}

func (x *StakeAccountInfoRequest) Reset() {
	*x = StakeAccountInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccountInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccountInfoRequest) ProtoMessage() {}

func (x *StakeAccountInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccountInfoRequest.ProtoReflect.Descriptor instead.
func (*StakeAccountInfoRequest) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{16}
}

func (x *StakeAccountInfoRequest) GetStakeAddressBase58() string {
	if x != nil {
		return x.StakeAddressBase58
	}
	return ""
}

type StakeAccountInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       string           `protobuf:"bytes,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Owner        string           `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Excutable    bool             `protobuf:"varint,3,opt,name=Excutable,proto3" json:"Excutable,omitempty"`
	RentEpoch    uint64           `protobuf:"varint,4,opt,name=RentEpoch,proto3" json:"RentEpoch,omitempty"`
	StakeAccount *StakeAccount    `protobuf:"bytes,5,opt,name=StakeAccount,proto3" json:"StakeAccount,omitempty"`
	RetStatus    *response.Status `protobuf:"bytes,6,opt,name=ret_status,json=retStatus,proto3" json:"ret_status,omitempty"`
}

func (x *StakeAccountInfoResponse) Reset() {
	*x = StakeAccountInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccountInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccountInfoResponse) ProtoMessage() {}

func (x *StakeAccountInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccountInfoResponse.ProtoReflect.Descriptor instead.
func (*StakeAccountInfoResponse) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{17}
}

func (x *StakeAccountInfoResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeAccountInfoResponse) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *StakeAccountInfoResponse) GetExcutable() bool {
	if x != nil {
		return x.Excutable
	}
	return false
}

func (x *StakeAccountInfoResponse) GetRentEpoch() uint64 {
	if x != nil {
		return x.RentEpoch
	}
	return 0
}

func (x *StakeAccountInfoResponse) GetStakeAccount() *StakeAccount {
	if x != nil {
		return x.StakeAccount
	}
	return nil
}

func (x *StakeAccountInfoResponse) GetRetStatus() *response.Status {
	if x != nil {
		return x.RetStatus
	}
	return nil
}

type StakeAccount_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta  *StakeAccount_Info_Meta  `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Stake *StakeAccount_Info_Stake `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (x *StakeAccount_Info) Reset() {
	*x = StakeAccount_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccount_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccount_Info) ProtoMessage() {}

func (x *StakeAccount_Info) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccount_Info.ProtoReflect.Descriptor instead.
func (*StakeAccount_Info) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StakeAccount_Info) GetMeta() *StakeAccount_Info_Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *StakeAccount_Info) GetStake() *StakeAccount_Info_Stake {
	if x != nil {
		return x.Stake
	}
	return nil
}

type StakeAccount_Info_Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RentExemptReserve int64                              `protobuf:"varint,1,opt,name=RentExemptReserve,proto3" json:"RentExemptReserve,omitempty"`
	Authorized        *StakeAccount_Info_Meta_Authorized `protobuf:"bytes,2,opt,name=authorized,proto3" json:"authorized,omitempty"`
}

func (x *StakeAccount_Info_Meta) Reset() {
	*x = StakeAccount_Info_Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccount_Info_Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccount_Info_Meta) ProtoMessage() {}

func (x *StakeAccount_Info_Meta) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccount_Info_Meta.ProtoReflect.Descriptor instead.
func (*StakeAccount_Info_Meta) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *StakeAccount_Info_Meta) GetRentExemptReserve() int64 {
	if x != nil {
		return x.RentExemptReserve
	}
	return 0
}

func (x *StakeAccount_Info_Meta) GetAuthorized() *StakeAccount_Info_Meta_Authorized {
	if x != nil {
		return x.Authorized
	}
	return nil
}

type StakeAccount_Info_Stake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegation      *StakeAccount_Info_Stake_Delegation `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation,omitempty"`
	CreditsObserved uint64                              `protobuf:"varint,2,opt,name=CreditsObserved,proto3" json:"CreditsObserved,omitempty"`
}

func (x *StakeAccount_Info_Stake) Reset() {
	*x = StakeAccount_Info_Stake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccount_Info_Stake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccount_Info_Stake) ProtoMessage() {}

func (x *StakeAccount_Info_Stake) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccount_Info_Stake.ProtoReflect.Descriptor instead.
func (*StakeAccount_Info_Stake) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *StakeAccount_Info_Stake) GetDelegation() *StakeAccount_Info_Stake_Delegation {
	if x != nil {
		return x.Delegation
	}
	return nil
}

func (x *StakeAccount_Info_Stake) GetCreditsObserved() uint64 {
	if x != nil {
		return x.CreditsObserved
	}
	return 0
}

type StakeAccount_Info_Meta_Authorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAddressBase58    string                                    `protobuf:"bytes,1,opt,name=StakeAddressBase58,proto3" json:"StakeAddressBase58,omitempty"`
	WithdrawAddressBase58 string                                    `protobuf:"bytes,2,opt,name=WithdrawAddressBase58,proto3" json:"WithdrawAddressBase58,omitempty"`
	Lockup                *StakeAccount_Info_Meta_Authorized_Lockup `protobuf:"bytes,3,opt,name=lockup,proto3" json:"lockup,omitempty"`
}

func (x *StakeAccount_Info_Meta_Authorized) Reset() {
	*x = StakeAccount_Info_Meta_Authorized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccount_Info_Meta_Authorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccount_Info_Meta_Authorized) ProtoMessage() {}

func (x *StakeAccount_Info_Meta_Authorized) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccount_Info_Meta_Authorized.ProtoReflect.Descriptor instead.
func (*StakeAccount_Info_Meta_Authorized) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

func (x *StakeAccount_Info_Meta_Authorized) GetStakeAddressBase58() string {
	if x != nil {
		return x.StakeAddressBase58
	}
	return ""
}

func (x *StakeAccount_Info_Meta_Authorized) GetWithdrawAddressBase58() string {
	if x != nil {
		return x.WithdrawAddressBase58
	}
	return ""
}

func (x *StakeAccount_Info_Meta_Authorized) GetLockup() *StakeAccount_Info_Meta_Authorized_Lockup {
	if x != nil {
		return x.Lockup
	}
	return nil
}

type StakeAccount_Info_Meta_Authorized_Lockup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnixTimeStamp          int64  `protobuf:"varint,1,opt,name=UnixTimeStamp,proto3" json:"UnixTimeStamp,omitempty"`
	Epoch                  uint64 `protobuf:"varint,2,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	CustodianAddressBase58 string `protobuf:"bytes,3,opt,name=CustodianAddressBase58,proto3" json:"CustodianAddressBase58,omitempty"`
}

func (x *StakeAccount_Info_Meta_Authorized_Lockup) Reset() {
	*x = StakeAccount_Info_Meta_Authorized_Lockup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccount_Info_Meta_Authorized_Lockup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccount_Info_Meta_Authorized_Lockup) ProtoMessage() {}

func (x *StakeAccount_Info_Meta_Authorized_Lockup) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccount_Info_Meta_Authorized_Lockup.ProtoReflect.Descriptor instead.
func (*StakeAccount_Info_Meta_Authorized_Lockup) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{1, 0, 0, 0, 0}
}

func (x *StakeAccount_Info_Meta_Authorized_Lockup) GetUnixTimeStamp() int64 {
	if x != nil {
		return x.UnixTimeStamp
	}
	return 0
}

func (x *StakeAccount_Info_Meta_Authorized_Lockup) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *StakeAccount_Info_Meta_Authorized_Lockup) GetCustodianAddressBase58() string {
	if x != nil {
		return x.CustodianAddressBase58
	}
	return ""
}

type StakeAccount_Info_Stake_Delegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoterAddressBase58 string  `protobuf:"bytes,1,opt,name=VoterAddressBase58,proto3" json:"VoterAddressBase58,omitempty"`
	Stake              int64   `protobuf:"varint,2,opt,name=Stake,proto3" json:"Stake,omitempty"`
	ActivationEpoch    int64   `protobuf:"varint,3,opt,name=ActivationEpoch,proto3" json:"ActivationEpoch,omitempty"`
	DeactivationEpoch  int64   `protobuf:"varint,4,opt,name=DeactivationEpoch,proto3" json:"DeactivationEpoch,omitempty"`
	WarmupCooldownRate float64 `protobuf:"fixed64,5,opt,name=WarmupCooldownRate,proto3" json:"WarmupCooldownRate,omitempty"`
}

func (x *StakeAccount_Info_Stake_Delegation) Reset() {
	*x = StakeAccount_Info_Stake_Delegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solana_stake_solana_stake_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccount_Info_Stake_Delegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccount_Info_Stake_Delegation) ProtoMessage() {}

func (x *StakeAccount_Info_Stake_Delegation) ProtoReflect() protoreflect.Message {
	mi := &file_solana_stake_solana_stake_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccount_Info_Stake_Delegation.ProtoReflect.Descriptor instead.
func (*StakeAccount_Info_Stake_Delegation) Descriptor() ([]byte, []int) {
	return file_solana_stake_solana_stake_proto_rawDescGZIP(), []int{1, 0, 1, 0}
}

func (x *StakeAccount_Info_Stake_Delegation) GetVoterAddressBase58() string {
	if x != nil {
		return x.VoterAddressBase58
	}
	return ""
}

func (x *StakeAccount_Info_Stake_Delegation) GetStake() int64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *StakeAccount_Info_Stake_Delegation) GetActivationEpoch() int64 {
	if x != nil {
		return x.ActivationEpoch
	}
	return 0
}

func (x *StakeAccount_Info_Stake_Delegation) GetDeactivationEpoch() int64 {
	if x != nil {
		return x.DeactivationEpoch
	}
	return 0
}

func (x *StakeAccount_Info_Stake_Delegation) GetWarmupCooldownRate() float64 {
	if x != nil {
		return x.WarmupCooldownRate
	}
	return 0
}

var File_solana_stake_solana_stake_proto protoreflect.FileDescriptor

var file_solana_stake_solana_stake_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2f, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb,
	0x09, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x77, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x77, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x74,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x19,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x19, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x41, 0x75,
	0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72,
	0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0xa9, 0x08, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0xab, 0x07, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x1a, 0xc8, 0x03, 0x0a, 0x04, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x6d, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x52, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x1a, 0xc0, 0x02, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35,
	0x38, 0x12, 0x34, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x1a, 0x7c, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x75,
	0x70, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x36, 0x0a,
	0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x35, 0x38, 0x1a, 0xe0, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x50, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x1a, 0xda, 0x01, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x6f,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x61, 0x72, 0x6d,
	0x75, 0x70, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x43, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x22, 0x75, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x53,
	0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x76, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95,
	0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x35,
	0x38, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35,
	0x38, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x22,
	0x60, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x7a, 0x0a, 0x16, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x35, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x2e, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73,
	0x65, 0x35, 0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x22, 0x62, 0x0a,
	0x17, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x35,
	0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x2e, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x35, 0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x65, 0x35, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61,
	0x73, 0x65, 0x35, 0x38, 0x22, 0xf5, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x45, 0x78, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x52, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x72,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x72, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x47, 0x0a, 0x12,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x4b, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x41, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x32, 0xad, 0x06, 0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0d,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60,
	0x0a, 0x0f, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x24, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x22, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_solana_stake_solana_stake_proto_rawDescOnce sync.Once
	file_solana_stake_solana_stake_proto_rawDescData = file_solana_stake_solana_stake_proto_rawDesc
)

func file_solana_stake_solana_stake_proto_rawDescGZIP() []byte {
	file_solana_stake_solana_stake_proto_rawDescOnce.Do(func() {
		file_solana_stake_solana_stake_proto_rawDescData = protoimpl.X.CompressGZIP(file_solana_stake_solana_stake_proto_rawDescData)
	})
	return file_solana_stake_solana_stake_proto_rawDescData
}

var file_solana_stake_solana_stake_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_solana_stake_solana_stake_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_solana_stake_solana_stake_proto_goTypes = []interface{}{
	(ValidatorSortField)(0),                          // 0: solana_stake.ValidatorSortField
	(ActivationStatus)(0),                            // 1: solana_stake.ActivationStatus
	(*Validator)(nil),                                // 2: solana_stake.Validator
	(*StakeAccount)(nil),                             // 3: solana_stake.StakeAccount
	(*ValidatorInfoRequest)(nil),                     // 4: solana_stake.ValidatorInfoRequest
	(*ValidatorInfoResponse)(nil),                    // 5: solana_stake.ValidatorInfoResponse
	(*ValidatorsListRequest)(nil),                    // 6: solana_stake.ValidatorsListRequest
	(*ValidatorsListResponse)(nil),                   // 7: solana_stake.ValidatorsListResponse
	(*CreateStakeAccountRequest)(nil),                // 8: solana_stake.CreateStakeAccountRequest
	(*CreateStakeAccountResponse)(nil),               // 9: solana_stake.CreateStakeAccountResponse
	(*DelegateStakeRequest)(nil),                     // 10: solana_stake.DelegateStakeRequest
	(*DelegateStakeResponse)(nil),                    // 11: solana_stake.DelegateStakeResponse
	(*DeactivateStakeRequest)(nil),                   // 12: solana_stake.DeactivateStakeRequest
	(*DeactivateStakeResponse)(nil),                  // 13: solana_stake.DeactivateStakeResponse
	(*WithdrawStakeRequest)(nil),                     // 14: solana_stake.WithdrawStakeRequest
	(*WithdrawStakeResponse)(nil),                    // 15: solana_stake.WithdrawStakeResponse
	(*StakeActivationStatusRequest)(nil),             // 16: solana_stake.StakeActivationStatusRequest
	(*StakeActivationStatusResponse)(nil),            // 17: solana_stake.StakeActivationStatusResponse
	(*StakeAccountInfoRequest)(nil),                  // 18: solana_stake.StakeAccountInfoRequest
	(*StakeAccountInfoResponse)(nil),                 // 19: solana_stake.StakeAccountInfoResponse
	(*StakeAccount_Info)(nil),                        // 20: solana_stake.StakeAccount.Info
	(*StakeAccount_Info_Meta)(nil),                   // 21: solana_stake.StakeAccount.Info.Meta
	(*StakeAccount_Info_Stake)(nil),                  // 22: solana_stake.StakeAccount.Info.Stake
	(*StakeAccount_Info_Meta_Authorized)(nil),        // 23: solana_stake.StakeAccount.Info.Meta.Authorized
	(*StakeAccount_Info_Meta_Authorized_Lockup)(nil), // 24: solana_stake.StakeAccount.Info.Meta.Authorized.Lockup
	(*StakeAccount_Info_Stake_Delegation)(nil),       // 25: solana_stake.StakeAccount.Info.Stake.Delegation
	(*timestamppb.Timestamp)(nil),                    // 26: google.protobuf.Timestamp
	(*response.Status)(nil),                          // 27: response.Status
	(types.Order)(0),                                 // 28: types.Order
}
var file_solana_stake_solana_stake_proto_depIdxs = []int32{
	26, // 0: solana_stake.Validator.CreatedAt:type_name -> google.protobuf.Timestamp
	26, // 1: solana_stake.Validator.UpdatedAt:type_name -> google.protobuf.Timestamp
	1,  // 2: solana_stake.StakeAccount.Status:type_name -> solana_stake.ActivationStatus
	20, // 3: solana_stake.StakeAccount.info:type_name -> solana_stake.StakeAccount.Info
	2,  // 4: solana_stake.ValidatorInfoResponse.Info:type_name -> solana_stake.Validator
	27, // 5: solana_stake.ValidatorInfoResponse.ret_status:type_name -> response.Status
	0,  // 6: solana_stake.ValidatorsListRequest.SortField:type_name -> solana_stake.ValidatorSortField
	28, // 7: solana_stake.ValidatorsListRequest.Order:type_name -> types.Order
	2,  // 8: solana_stake.ValidatorsListResponse.List:type_name -> solana_stake.Validator
	27, // 9: solana_stake.ValidatorsListResponse.ret_status:type_name -> response.Status
	27, // 10: solana_stake.CreateStakeAccountResponse.ret_status:type_name -> response.Status
	27, // 11: solana_stake.DelegateStakeResponse.ret_status:type_name -> response.Status
	27, // 12: solana_stake.DeactivateStakeResponse.ret_status:type_name -> response.Status
	27, // 13: solana_stake.WithdrawStakeResponse.ret_status:type_name -> response.Status
	1,  // 14: solana_stake.StakeActivationStatusResponse.Status:type_name -> solana_stake.ActivationStatus
	27, // 15: solana_stake.StakeActivationStatusResponse.ret_status:type_name -> response.Status
	3,  // 16: solana_stake.StakeAccountInfoResponse.StakeAccount:type_name -> solana_stake.StakeAccount
	27, // 17: solana_stake.StakeAccountInfoResponse.ret_status:type_name -> response.Status
	21, // 18: solana_stake.StakeAccount.Info.meta:type_name -> solana_stake.StakeAccount.Info.Meta
	22, // 19: solana_stake.StakeAccount.Info.stake:type_name -> solana_stake.StakeAccount.Info.Stake
	23, // 20: solana_stake.StakeAccount.Info.Meta.authorized:type_name -> solana_stake.StakeAccount.Info.Meta.Authorized
	25, // 21: solana_stake.StakeAccount.Info.Stake.delegation:type_name -> solana_stake.StakeAccount.Info.Stake.Delegation
	24, // 22: solana_stake.StakeAccount.Info.Meta.Authorized.lockup:type_name -> solana_stake.StakeAccount.Info.Meta.Authorized.Lockup
	4,  // 23: solana_stake.SolanaStakeService.ValidatorInfo:input_type -> solana_stake.ValidatorInfoRequest
	6,  // 24: solana_stake.SolanaStakeService.ValidatorsList:input_type -> solana_stake.ValidatorsListRequest
	8,  // 25: solana_stake.SolanaStakeService.CreateStakeAccount:input_type -> solana_stake.CreateStakeAccountRequest
	10, // 26: solana_stake.SolanaStakeService.DelegateStake:input_type -> solana_stake.DelegateStakeRequest
	12, // 27: solana_stake.SolanaStakeService.DeactivateStake:input_type -> solana_stake.DeactivateStakeRequest
	14, // 28: solana_stake.SolanaStakeService.WithdrawStake:input_type -> solana_stake.WithdrawStakeRequest
	16, // 29: solana_stake.SolanaStakeService.StakeActivationStatus:input_type -> solana_stake.StakeActivationStatusRequest
	18, // 30: solana_stake.SolanaStakeService.StakeAccountInfo:input_type -> solana_stake.StakeAccountInfoRequest
	5,  // 31: solana_stake.SolanaStakeService.ValidatorInfo:output_type -> solana_stake.ValidatorInfoResponse
	7,  // 32: solana_stake.SolanaStakeService.ValidatorsList:output_type -> solana_stake.ValidatorsListResponse
	9,  // 33: solana_stake.SolanaStakeService.CreateStakeAccount:output_type -> solana_stake.CreateStakeAccountResponse
	11, // 34: solana_stake.SolanaStakeService.DelegateStake:output_type -> solana_stake.DelegateStakeResponse
	13, // 35: solana_stake.SolanaStakeService.DeactivateStake:output_type -> solana_stake.DeactivateStakeResponse
	15, // 36: solana_stake.SolanaStakeService.WithdrawStake:output_type -> solana_stake.WithdrawStakeResponse
	17, // 37: solana_stake.SolanaStakeService.StakeActivationStatus:output_type -> solana_stake.StakeActivationStatusResponse
	19, // 38: solana_stake.SolanaStakeService.StakeAccountInfo:output_type -> solana_stake.StakeAccountInfoResponse
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_solana_stake_solana_stake_proto_init() }
func file_solana_stake_solana_stake_proto_init() {
	if File_solana_stake_solana_stake_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_solana_stake_solana_stake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStakeAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStakeAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeActivationStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeActivationStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccountInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccountInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccount_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccount_Info_Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccount_Info_Stake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccount_Info_Meta_Authorized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccount_Info_Meta_Authorized_Lockup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solana_stake_solana_stake_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccount_Info_Stake_Delegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_solana_stake_solana_stake_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_solana_stake_solana_stake_proto_goTypes,
		DependencyIndexes: file_solana_stake_solana_stake_proto_depIdxs,
		EnumInfos:         file_solana_stake_solana_stake_proto_enumTypes,
		MessageInfos:      file_solana_stake_solana_stake_proto_msgTypes,
	}.Build()
	File_solana_stake_solana_stake_proto = out.File
	file_solana_stake_solana_stake_proto_rawDesc = nil
	file_solana_stake_solana_stake_proto_goTypes = nil
	file_solana_stake_solana_stake_proto_depIdxs = nil
}
