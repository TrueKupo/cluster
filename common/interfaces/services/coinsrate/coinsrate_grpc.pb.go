// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc2
// source: coinsrate/coinsrate.proto

package coinsrate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoinsRateServiceClient is the client API for CoinsRateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinsRateServiceClient interface {
	LastRates(ctx context.Context, in *LastRatesRequest, opts ...grpc.CallOption) (*LastRatesResponse, error)
}

type coinsRateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinsRateServiceClient(cc grpc.ClientConnInterface) CoinsRateServiceClient {
	return &coinsRateServiceClient{cc}
}

func (c *coinsRateServiceClient) LastRates(ctx context.Context, in *LastRatesRequest, opts ...grpc.CallOption) (*LastRatesResponse, error) {
	out := new(LastRatesResponse)
	err := c.cc.Invoke(ctx, "/coinsrate.CoinsRateService/LastRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinsRateServiceServer is the server API for CoinsRateService service.
// All implementations must embed UnimplementedCoinsRateServiceServer
// for forward compatibility
type CoinsRateServiceServer interface {
	LastRates(context.Context, *LastRatesRequest) (*LastRatesResponse, error)
	mustEmbedUnimplementedCoinsRateServiceServer()
}

// UnimplementedCoinsRateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoinsRateServiceServer struct {
}

func (UnimplementedCoinsRateServiceServer) LastRates(context.Context, *LastRatesRequest) (*LastRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastRates not implemented")
}
func (UnimplementedCoinsRateServiceServer) mustEmbedUnimplementedCoinsRateServiceServer() {}

// UnsafeCoinsRateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinsRateServiceServer will
// result in compilation errors.
type UnsafeCoinsRateServiceServer interface {
	mustEmbedUnimplementedCoinsRateServiceServer()
}

func RegisterCoinsRateServiceServer(s grpc.ServiceRegistrar, srv CoinsRateServiceServer) {
	s.RegisterService(&CoinsRateService_ServiceDesc, srv)
}

func _CoinsRateService_LastRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinsRateServiceServer).LastRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinsrate.CoinsRateService/LastRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinsRateServiceServer).LastRates(ctx, req.(*LastRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinsRateService_ServiceDesc is the grpc.ServiceDesc for CoinsRateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinsRateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coinsrate.CoinsRateService",
	HandlerType: (*CoinsRateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastRates",
			Handler:    _CoinsRateService_LastRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coinsrate/coinsrate.proto",
}
